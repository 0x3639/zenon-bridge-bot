name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest safety bandit
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check for security vulnerabilities
      continue-on-error: true
      run: |
        # Check for known security vulnerabilities in dependencies
        # Using the new scan command as recommended
        safety scan || true
        # Run bandit for security issues in code
        bandit -r src/ -ll -f json -o bandit-report.json || true
    
    - name: Test imports
      env:
        TELEGRAM_BOT_TOKEN: "dummy_token_for_testing"
      run: |
        python -c "from src.config import BRIDGE_ADDRESS"
        python -c "from src.zenon.decoder import TransactionDecoder"
        python -c "from src.zenon.websocket import ZenonWebSocket"
        python -c "from src.telegram.formatter import MessageFormatter"
        python -c "from src.telegram.handlers import TelegramHandlers"
    
    - name: Test database initialization
      run: |
        python database.py
    
    - name: Check for hardcoded secrets
      run: |
        # Check that no actual bot tokens are committed
        ! grep -r "^TELEGRAM_BOT_TOKEN=[0-9]" . --include="*.py" --include=".env*"
        # Ensure .env is in gitignore
        grep -q "^\.env$" .gitignore

  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.10-slim
        
        WORKDIR /app
        
        # Install dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy application code
        COPY . .
        
        # Create non-root user
        RUN useradd -m -u 1000 botuser && chown -R botuser:botuser /app
        USER botuser
        
        # Run the bot
        CMD ["python", "-m", "src.bot"]
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t zenon-bridge-bot:test .
    
    - name: Test Docker image
      run: |
        docker run --rm zenon-bridge-bot:test python -c "print('Docker image works!')"